// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: protos/class.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClassServiceClient is the client API for ClassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassServiceClient interface {
	GetClasses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ClassService_GetClassesClient, error)
}

type classServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassServiceClient(cc grpc.ClientConnInterface) ClassServiceClient {
	return &classServiceClient{cc}
}

func (c *classServiceClient) GetClasses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ClassService_GetClassesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClassService_ServiceDesc.Streams[0], "/class.ClassService/GetClasses", opts...)
	if err != nil {
		return nil, err
	}
	x := &classServiceGetClassesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClassService_GetClassesClient interface {
	Recv() (*ReturnedType, error)
	grpc.ClientStream
}

type classServiceGetClassesClient struct {
	grpc.ClientStream
}

func (x *classServiceGetClassesClient) Recv() (*ReturnedType, error) {
	m := new(ReturnedType)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClassServiceServer is the server API for ClassService service.
// All implementations must embed UnimplementedClassServiceServer
// for forward compatibility
type ClassServiceServer interface {
	GetClasses(*Empty, ClassService_GetClassesServer) error
	mustEmbedUnimplementedClassServiceServer()
}

// UnimplementedClassServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClassServiceServer struct {
}

func (UnimplementedClassServiceServer) GetClasses(*Empty, ClassService_GetClassesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetClasses not implemented")
}
func (UnimplementedClassServiceServer) mustEmbedUnimplementedClassServiceServer() {}

// UnsafeClassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassServiceServer will
// result in compilation errors.
type UnsafeClassServiceServer interface {
	mustEmbedUnimplementedClassServiceServer()
}

func RegisterClassServiceServer(s grpc.ServiceRegistrar, srv ClassServiceServer) {
	s.RegisterService(&ClassService_ServiceDesc, srv)
}

func _ClassService_GetClasses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClassServiceServer).GetClasses(m, &classServiceGetClassesServer{stream})
}

type ClassService_GetClassesServer interface {
	Send(*ReturnedType) error
	grpc.ServerStream
}

type classServiceGetClassesServer struct {
	grpc.ServerStream
}

func (x *classServiceGetClassesServer) Send(m *ReturnedType) error {
	return x.ServerStream.SendMsg(m)
}

// ClassService_ServiceDesc is the grpc.ServiceDesc for ClassService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClassService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "class.ClassService",
	HandlerType: (*ClassServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetClasses",
			Handler:       _ClassService_GetClasses_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/class.proto",
}
